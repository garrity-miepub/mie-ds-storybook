{
  "version": 3,
  "sources": ["../../../../../@storybook/addon-svelte-csf/dist/utils/identifier-utils.js", "../../../../../@storybook/addon-svelte-csf/dist/runtime/contexts/extractor.svelte.js", "../../../../../@storybook/addon-svelte-csf/dist/runtime/contexts/renderer.svelte.js"],
  "sourcesContent": ["import { sanitize } from '@storybook/csf';\n/**\n * @example storyIdToExportName('some-story') => 'SomeStory'\n */\nexport const storyIdToExportName = (storyId) => storyId\n    .split('-')\n    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n    .join('');\n/**\n * @example exportNameToStoryId('SomeStory') => 'some-story'\n */\nexport const exportNameToStoryId = (exportName) => exportName.replace(/([a-z0â€“9])([A-Z])/g, '$1-$2').toLowerCase();\n/**\n * @example storyNameToId('Some Long Story Name!') => 'some-long-story-name'\n */\nexport const storyNameToId = (name) => \n// add a space before all caps and use utility from @storybook/csf to sanitize the resulting string\nsanitize(name.replace(/([A-Z])/g, ' $1').trim());\n/**\n * @example storyNameToExportName('Some Long Story Name!') => 'SomeLongStoryName'\n */\nexport const storyNameToExportName = (name) => storyIdToExportName(storyNameToId(name));\n/**\n * Check if a string is a valid JavaScript variable name\n * @example isValidVariableName('SomeStory') => true\n * @example isValidVariableName('Some_Story') => true\n * @example isValidVariableName('Some Story') => false\n * @example isValidVariableName('Some-Story') => false\n * @example isValidVariableName('default') => false\n *\n * @see https://github.com/shinnn/is-var-name\n */\nexport const isValidVariableName = (str) => {\n    if (typeof str !== 'string') {\n        return false;\n    }\n    if (str.trim() !== str) {\n        return false;\n    }\n    try {\n        new Function(str, 'var ' + str);\n    }\n    catch (_) {\n        return false;\n    }\n    return true;\n};\n/**\n * Function to convert a non valid string template name to a valid identifier preventing\n * clashing with other templates with similar names.\n *\n * Stolen with ðŸ§¡ from the svelte codebase by @paoloricciuti\n *\n * @param str the template name\n * @returns a hash based on the content of the initial string which is a valid identifier\n */\nexport function hashTemplateName(str) {\n    if (isValidVariableName(str))\n        return str;\n    str = str.replace(/\\r/g, '');\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return `template_${(hash >>> 0).toString(36)}`;\n}\n", "import { getContext, hasContext, setContext } from 'svelte';\nimport { storyNameToExportName } from '../../utils/identifier-utils.js';\nconst CONTEXT_KEY = 'storybook-stories-extractor-context';\nfunction buildContext(storyCmpProps) {\n    let isExtracting = $state(storyCmpProps.isExtracting);\n    let register = $state(storyCmpProps.register);\n    return {\n        get isExtracting() {\n            return isExtracting;\n        },\n        get register() {\n            return register;\n        },\n    };\n}\nexport function createStoriesExtractorContext(repository) {\n    const { stories } = repository;\n    const ctx = buildContext({\n        isExtracting: true,\n        register: (s) => {\n            stories.set(s.exportName ?? storyNameToExportName(s.name), s);\n        },\n    });\n    setContext(CONTEXT_KEY, ctx);\n}\nexport function useStoriesExtractor() {\n    if (!hasContext(CONTEXT_KEY)) {\n        setContext(CONTEXT_KEY, buildContext({\n            isExtracting: false,\n            register: () => { },\n        }));\n    }\n    return getContext(CONTEXT_KEY);\n}\n", "import { getContext, hasContext, setContext } from 'svelte';\nconst CONTEXT_KEY = 'storybook-story-renderer-context';\nfunction buildContext(props) {\n    let currentStoryExportName = $state(props.currentStoryExportName);\n    let args = $state(props.args);\n    let storyContext = $state(props.storyContext);\n    function set(props) {\n        currentStoryExportName = props.currentStoryExportName;\n        args = props.args;\n        storyContext = props.storyContext;\n    }\n    return {\n        get args() {\n            return args;\n        },\n        get storyContext() {\n            return storyContext;\n        },\n        get currentStoryExportName() {\n            return currentStoryExportName;\n        },\n        set,\n    };\n}\nfunction createStoryRendererContext() {\n    const ctx = buildContext({\n        currentStoryExportName: undefined,\n        args: {},\n        // @ts-expect-error FIXME: I don't know how to satisfy this one\n        storyContext: {},\n    });\n    setContext(CONTEXT_KEY, ctx);\n}\nexport function useStoryRenderer() {\n    if (!hasContext(CONTEXT_KEY)) {\n        createStoryRendererContext();\n    }\n    return getContext(CONTEXT_KEY);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAIO,IAAM,sBAAsB,CAAC,YAAY,QAC3C,MAAM,GAAG,EACT,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC,EAC1D,KAAK,EAAE;AAQL,IAAM,gBAAgB,CAAC;AAAA;AAAA,EAE9B,EAAS,KAAK,QAAQ,YAAY,KAAK,EAAE,KAAK,CAAC;AAAA;AAIxC,IAAM,wBAAwB,CAAC,SAAS,oBAAoB,cAAc,IAAI,CAAC;;;ICnBhF,cAAc;SACX,aAAa,eAAa;MAC3B,eAAY,MAAU,cAAc,YAAY;MAChD,WAAQ,MAAU,cAAc,QAAQ;;QAEpC,eAAY;aACL;;QAEP,WAAQ;aACD;;;;SAIH,8BAA8B,YAAU;UAC5C,QAAO,IAAK;QACd,MAAM,aAAY;IACpB,cAAc;IACd,UAAQ,CAAG,MAAC;AACR,cAAQ,IAAI,EAAE,cAAc,sBAAsB,EAAE,IAAI,GAAG,CAAC;;;AAGpE,aAAW,aAAa,GAAG;;SAEf,sBAAmB;OAC1B,WAAW,WAAW,GAAA;AACvB,eAAW,aAAa,aAAY,EAChC,cAAc,OACd,UAAQ,MAAA;IAAA,EAAA,CAAA,CAAA;;SAGT,WAAW,WAAW;;;;IC/B3BA,eAAc;SACXC,cAAa,OAAK;MACnB,yBAAsB,MAAA,MAAU,MAAM,sBAAsB,CAAA;MAC5D,OAAI,MAAA,MAAU,MAAM,IAAI,CAAA;MACxB,eAAY,MAAA,MAAU,MAAM,YAAY,CAAA;WACnCC,KAAIC,QAAK;QACd,wBAAsB,MAAGA,OAAM,wBAAsB,MAArD,sBAAsB,CAAA;QACtB,MAAI,MAAGA,OAAM,MAAI,MAAjB,IAAI,CAAA;QACJ,cAAY,MAAGA,OAAM,cAAY,MAAjC,YAAY,CAAA;;;QAGR,OAAI;iBACG,IAAI;;QAEX,eAAY;iBACL,YAAY;;QAEnB,yBAAsB;iBACf,sBAAsB;;IAEjC,KAAAD;;;SAGC,6BAA0B;QACzB,MAAMD,cAAY;IACpB,wBAAwB;IACxB,MAAI,CAAA;;IAEJ,cAAY,CAAA;;AAEhB,aAAWD,cAAa,GAAG;;SAEf,mBAAgB;OACvB,WAAWA,YAAW,GAAA;AACvB,+BAA0B;;SAEvB,WAAWA,YAAW;;",
  "names": ["CONTEXT_KEY", "buildContext", "set", "props"]
}
