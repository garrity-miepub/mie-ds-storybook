import {
  O
} from "./chunk-RNIMMRSM.js";
import {
  get,
  getContext,
  hasContext,
  proxy,
  set,
  setContext,
  state
} from "./chunk-VSM3E7OU.js";

// node_modules/@storybook/addon-svelte-csf/dist/utils/identifier-utils.js
var storyIdToExportName = (storyId) => storyId.split("-").map((part) => part.charAt(0).toUpperCase() + part.slice(1)).join("");
var storyNameToId = (name) => (
  // add a space before all caps and use utility from @storybook/csf to sanitize the resulting string
  O(name.replace(/([A-Z])/g, " $1").trim())
);
var storyNameToExportName = (name) => storyIdToExportName(storyNameToId(name));

// node_modules/@storybook/addon-svelte-csf/dist/runtime/contexts/extractor.svelte.js
var CONTEXT_KEY = "storybook-stories-extractor-context";
function buildContext(storyCmpProps) {
  let isExtracting = proxy(storyCmpProps.isExtracting);
  let register = proxy(storyCmpProps.register);
  return {
    get isExtracting() {
      return isExtracting;
    },
    get register() {
      return register;
    }
  };
}
function createStoriesExtractorContext(repository) {
  const { stories } = repository;
  const ctx = buildContext({
    isExtracting: true,
    register: (s) => {
      stories.set(s.exportName ?? storyNameToExportName(s.name), s);
    }
  });
  setContext(CONTEXT_KEY, ctx);
}
function useStoriesExtractor() {
  if (!hasContext(CONTEXT_KEY)) {
    setContext(CONTEXT_KEY, buildContext({ isExtracting: false, register: () => {
    } }));
  }
  return getContext(CONTEXT_KEY);
}

// node_modules/@storybook/addon-svelte-csf/dist/runtime/contexts/renderer.svelte.js
var CONTEXT_KEY2 = "storybook-story-renderer-context";
function buildContext2(props) {
  let currentStoryExportName = state(proxy(props.currentStoryExportName));
  let args = state(proxy(props.args));
  let storyContext = state(proxy(props.storyContext));
  function set2(props2) {
    set(currentStoryExportName, proxy(props2.currentStoryExportName, null, currentStoryExportName));
    set(args, proxy(props2.args, null, args));
    set(storyContext, proxy(props2.storyContext, null, storyContext));
  }
  return {
    get args() {
      return get(args);
    },
    get storyContext() {
      return get(storyContext);
    },
    get currentStoryExportName() {
      return get(currentStoryExportName);
    },
    set: set2
  };
}
function createStoryRendererContext() {
  const ctx = buildContext2({
    currentStoryExportName: void 0,
    args: {},
    // @ts-expect-error FIXME: I don't know how to satisfy this one
    storyContext: {}
  });
  setContext(CONTEXT_KEY2, ctx);
}
function useStoryRenderer() {
  if (!hasContext(CONTEXT_KEY2)) {
    createStoryRendererContext();
  }
  return getContext(CONTEXT_KEY2);
}

export {
  storyNameToExportName,
  createStoriesExtractorContext,
  useStoriesExtractor,
  useStoryRenderer
};
//# sourceMappingURL=chunk-RYHFBKE5.js.map
