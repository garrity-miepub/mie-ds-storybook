import {
  storyNameToExportName,
  useStoriesExtractor,
  useStoryRenderer
} from "./chunk-RYHFBKE5.js";
import "./chunk-RNIMMRSM.js";
import "./chunk-3MU2VDGX.js";
import "./chunk-4UUEZKKJ.js";
import {
  add_locations,
  check_target,
  component,
  hmr,
  if_block,
  legacy_api,
  prop,
  rest_props,
  slot,
  snippet,
  spread_props,
  validate_prop_bindings
} from "./chunk-UYNHXJBJ.js";
import {
  append,
  comment,
  template
} from "./chunk-H6BEBDWE.js";
import {
  FILENAME,
  HMR,
  derived,
  first_child,
  get,
  getContext,
  hasContext,
  mark_module_end,
  mark_module_start,
  pop,
  proxy,
  push,
  set,
  setContext,
  state,
  strict_equals,
  user_effect
} from "./chunk-VSM3E7OU.js";
import "./chunk-BOVLM7T7.js";
import "./chunk-BFCEFRYA.js";

// node_modules/@storybook/addon-svelte-csf/dist/runtime/contexts/template.svelte.js
var CONTEXT_KEYS = "storybook-stories-template-snippet-context";
function buildContext() {
  let template2 = state(void 0);
  function set2(snippet2) {
    set(template2, proxy(snippet2, null, template2));
  }
  return {
    get template() {
      return get(template2);
    },
    set: set2
  };
}
function useStoriesTemplate() {
  if (!hasContext(CONTEXT_KEYS)) {
    setContext(CONTEXT_KEYS, buildContext());
  }
  return getContext(CONTEXT_KEYS).template;
}
function setTemplate(snippet2) {
  if (!hasContext(CONTEXT_KEYS)) {
    setContext(CONTEXT_KEYS, buildContext());
  }
  const ctx = getContext(CONTEXT_KEYS);
  ctx.set(snippet2);
}

// node_modules/@storybook/addon-svelte-csf/dist/runtime/Story.svelte
mark_module_start();
Story[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/Story.svelte";
var root_7 = add_locations(template(`<p>No story rendered. See <a href="https://github.com/storybookjs/addon-svelte-csf#defining-stories" target="_blank">the docs</a> on how to define stories.</p>`), Story[FILENAME], [[116, 4, [[117, 29]]]]);
function Story($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Story);
  validate_prop_bindings($$props, [], [], Story);
  const restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "name",
      "exportName",
      "play"
    ],
    "restProps"
  );
  const exportName = $$props.exportName ?? storyNameToExportName($$props.name);
  const extractor = useStoriesExtractor();
  const renderer = useStoryRenderer();
  const template2 = useStoriesTemplate();
  const isCurrentlyViewed = derived(() => !extractor.isExtracting && strict_equals(renderer.currentStoryExportName, exportName));
  if (extractor.isExtracting) {
    extractor.register({
      children: $$props.children,
      name: $$props.name,
      exportName,
      play: $$props.play,
      ...restProps
    });
  }
  function injectIntoPlayFunction(storyContext, playToInject) {
    if (playToInject && storyContext.playFunction) {
      storyContext.playFunction.__play = playToInject;
    }
  }
  user_effect(() => {
    if (get(isCurrentlyViewed)) {
      injectIntoPlayFunction(renderer.storyContext, $$props.play);
    }
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          snippet(node_2, () => $$props.children, () => renderer.args, () => renderer.storyContext);
          append($$anchor3, fragment_2);
        };
        var alternate_2 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_3 = first_child(fragment_3);
          {
            var consequent_1 = ($$anchor4) => {
              template2($$anchor4, () => renderer.args, () => renderer.storyContext);
            };
            var alternate_1 = ($$anchor4) => {
              var fragment_5 = comment();
              var node_4 = first_child(fragment_5);
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_6 = comment();
                  var node_5 = first_child(fragment_6);
                  component(node_5, () => renderer.storyContext.component, ($$anchor6, $$component) => {
                    $$component($$anchor6, spread_props(() => renderer.args));
                  });
                  append($$anchor5, fragment_6);
                };
                var alternate = ($$anchor5) => {
                  var p = root_7();
                  append($$anchor5, p);
                };
                if_block(
                  node_4,
                  ($$render) => {
                    if (renderer.storyContext.component) $$render(consequent_2);
                    else $$render(alternate, false);
                  },
                  true
                );
              }
              append($$anchor4, fragment_5);
            };
            if_block(
              node_3,
              ($$render) => {
                if (template2) $$render(consequent_1);
                else $$render(alternate_1, false);
              },
              true
            );
          }
          append($$anchor3, fragment_3);
        };
        if_block(node_1, ($$render) => {
          if ($$props.children) $$render(consequent);
          else $$render(alternate_2, false);
        });
      }
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (get(isCurrentlyViewed)) $$render(consequent_3);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Story = hmr(Story, () => Story[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Story[HMR].source;
    set(Story[HMR].source, module.default[HMR].original);
  });
}
var Story_default = Story;
mark_module_end(Story);

// node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyMeta.svelte
mark_module_start();
LegacyMeta[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyMeta.svelte";
function LegacyMeta($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LegacyMeta);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LegacyMeta = hmr(LegacyMeta, () => LegacyMeta[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LegacyMeta[HMR].source;
    set(LegacyMeta[HMR].source, module.default[HMR].original);
  });
}
var LegacyMeta_default = LegacyMeta;
mark_module_end(LegacyMeta);

// node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyStory.svelte
mark_module_start();
LegacyStory[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyStory.svelte";
function LegacyStory($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LegacyStory);
  let args;
  let context;
  var fragment = comment();
  var node = first_child(fragment);
  slot(node, $$props, "default", { context, args }, null);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LegacyStory = hmr(LegacyStory, () => LegacyStory[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LegacyStory[HMR].source;
    set(LegacyStory[HMR].source, module.default[HMR].original);
  });
}
var LegacyStory_default = LegacyStory;
mark_module_end(LegacyStory);

// node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyTemplate.svelte
mark_module_start();
LegacyTemplate[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyTemplate.svelte";
function LegacyTemplate($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LegacyTemplate);
  let id = prop($$props, "id", 8, "default");
  const silentWarningAboutId = id();
  let args;
  let context;
  var fragment = comment();
  var node = first_child(fragment);
  slot(node, $$props, "default", { context, args }, null);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LegacyTemplate = hmr(LegacyTemplate, () => LegacyTemplate[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LegacyTemplate[HMR].source;
    set(LegacyTemplate[HMR].source, module.default[HMR].original);
  });
}
var LegacyTemplate_default = LegacyTemplate;
mark_module_end(LegacyTemplate);

// node_modules/@storybook/addon-svelte-csf/dist/index.js
function defineMeta(_meta) {
  return {
    Story: Story_default
  };
}
export {
  LegacyMeta_default as Meta,
  LegacyStory_default as Story,
  LegacyTemplate_default as Template,
  defineMeta,
  setTemplate
};
//# sourceMappingURL=@storybook_addon-svelte-csf.js.map
